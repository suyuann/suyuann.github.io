{"pages":[{"title":"about","text":"声明 本博客为个人博客，仅供个人学习之用，未经博主本人许可，任何个人或媒体不得将其用于商业用途。 博文中部分图片来自网络，如有侵权请联系博主及时删除，联系方式：s_yuan@foxmail.com Statement This blog is for personal learning purposes only and may not be used by any individual or media for commercial purposes without the permission of the blogger. Some pictures in the blog post come from the internet. If there is any infringement, please contact the blogger to delete it in time. Email: s_yuan@foxmail.com","link":"/about/index.html"}],"posts":[{"title":"AlexNet网络模型","text":"一：结构分析AlexNet网络结构示意图（双GPU并行运算）如下图所示，共由5个卷积层（convolution layer）和3个全连接层（fully-connected layer）共8层网络组成，输入图像尺寸为 227*227*3，经过5层的卷积操作和部分池化运算得到大小为 6*6*256 的特征图（feature map），最后通过全连接层输出 1000*1 的 特征向量。 输入图像大小：227*227*3 （对原始的图像224*224*3 进行了Padding操作） 卷积层1： ​ 输入数据：227*227*3 ​ 卷积核：大小11*11*3 ，步长4，数量96 ​ 卷积后的数据：（227 - 11）/ 4 + 1 = 55 ，即 55*55*96 ​ ReLU1后的数据：55*55*96 ​ 最大池化层1（Max Pooling）：核大小3*3，步长2 ​ 池化运算后的数据（降采样）：（55 -3 ）/ 2 + 1 = 27 ，即27*27*96 ​ 局部响应归一化层（LRN） 卷积层2： ​ 输入数据：27*27*96 （需进行Padding操作） ​ 卷积核：大小5*5*48，步长1，数量256 ​ 卷积后的数据：（27 + 4 - 5）/ 1 + 1 = 27，即27*27*256 ​ ReLU2后的数据：27*27*256 ​ 局部响应归一化层（LRN） ​ 最大池化层2：核大小3*3，步长2 ​ 池化运算后的数据（降采样）：（27 -3 ）/ 2 + 1 = 13 ，即13*13*256 ​ 局部响应归一化层（LRN） 卷积层3： ​ 输入数据：13*13*256（需进行Padding操作） ​ 卷积核：大小3*3*128，步长1，数量384 ​ 卷积后的数据：（13 + 2 - 3）/ 1 + 1 = 13，即13*13*384 ​ ReLU3后的数据：13*13*384 ​ 无LRN层和最大池化层 卷积层4： ​ 输入数据：13*13*384（需进行Padding操作） ​ 卷积核：大小3*3*192，步长1，数量384 ​ 卷积后的数据：（13 + 2 - 3）/ 1 + 1 = 13，即13*13*384 ​ ReLU4后的数据：13*13*384 ​ 无LRN层和最大池化层 卷积层5： ​ 输入数据：13*13*384（需进行Padding操作） ​ 卷积核：大小3*3*192，步长1，数量256 ​ 卷积后的数据：（13 + 2 - 3）/ 1 + 1 = 13，即13*13*256 ​ ReLU5后的数据：13*13*256 ​ 最大池化层：核大小3*3，步长2 ​ 池化运算后的数据（降采样）：（13 -3 ）/ 2 + 1 = 6 ，即6*6*256 全连接层6： ​ 输入数据：6*6*256 ​ 用4096个大小为 6*6*256 的卷积核对输入数据进行卷积操作，通过4096个神经元输出运算结果，4096个运算结果通过ReLU6生成4096个数据，再进行ReLU6激活函数和Dropout处理后输出4096个数据。 全连接层7： ​ 第6层输出的4096个数据与第7层的4096个神经元进行全连接，经由ReLU7进行处理后生成4096个数据，再进行Dropout处理后输出4096个数据。 全连接层8： ​ 第7层输出的4096个数据与第8层的1000个神经元进行全连接，输出1000*1的一维向量。最后用softmax输出1000类物体各类的概率值。 二：主要特点1. Training on Multiple GPUs 利用两块NVIDIA GTX 580 3GB GPU并行运算来提高训练速度（通过120万张图像训练网络并训练了90轮，花费时间5到6天）。应用于所有卷积层和所有全连接层（GPU之间仅在特定的层间通信）。 2. ReLU Nonlinearity（Rectified Linear Unit） 使用ReLU激活函数代替了Sigmoid激活函数，并验证其效果在较深的网络超过了Sigmoid，解决了Sigmoid在网络较深时的梯度弥散问题。 3. LRN（Local Response Normalization） LRN一般是在激活、池化后进行的一种处理方法，通过对局部神经元的活动创建竞争机制，使得其中响应比较大的值变得相对更大，并抑制其他反馈较小的神经元，增强了模型的泛化能力。AlexNet中LRN层应用于卷积层1、2后。 4. Overlapping Pooling AlexNet全部采用最大池化而非此前普遍采用的平均池化，一方面避免了采用平均池化所导致的图像模糊，另一方面覆叠的池化操作（pool_size &gt; stride）使得特征信息更完善，在训练模型过程中更不容易过拟合。在AlexNet中最大池化操作应用于卷积层1、2、5后。 5. Date Augmentation 采用数据增强的方式扩充了数据库的同时避免过拟合。 6. Dropout 随机dropout一些神经元,以避免模型过拟合，在AlexNet网络模型中应用于全连接层6和全连接层7。 三：学习细节使用随机梯度下降法（stochastic gradient descent ）进行训练，每个训练批次（batch size）有128个样本，动力（momentum）为0.9，权重衰减因子（weight decay factor）为0.0005。 四：参考文献 1.原文：http://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networ 2.原文翻译参考：https://blog.csdn.net/qq_39727487/article/details/88653215 3.https://blog.csdn.net/qq_24695385/article/details/80368618 4.https://blog.csdn.net/zyqdragon/article/details/72353420 5.https://link.zhihu.com/?target=http%3A//www.cs.toronto.edu/~fritz/absps/imagenet.pdf","link":"/2019/06/21/AlexNet网络模型/"},{"title":"Hexo-About 页面的添加","text":"ICARUS主题不经配置的 “About” 菜单在访问时，会转至 404 页面，为了在 “About” 链接页面中添加个人简介及相关信息时，应进行相应的配置！ 一：ICARUS主题配置文件的更改在ICARUS主题的配置文件 _config.yml 文件中找到关键字 “menu” ，按如下方式修改并保存： 123456menu Home: / Archives: /archives Categories: /categories Tags: /tags About: /about # 与该项修改一致即可 二： “About” 页面的创建将 Git Bash 定位至 Hexo 配置文件所在目录下，运行如下指令： 1hexo new page &quot;about&quot; 此时会在 “source” 文件夹中生成一个名为 “about” 的文件夹，打开该文件夹中的 index.md 文件并添加自己需要展示的个人介绍等信息，保存后运行如下的指令进行博客的更新部署： 12hexo ghexo d","link":"/2019/04/23/Hexo-About-页面的添加/"},{"title":"Hexo 个性化域名的配置","text":"用 Hexo 框架结合 gitHub pages 搭建的个人博客默认的访问地址为 “https://yourname.github.io” ，当然，我们也可以配置个性化的域名，个性化域名配置成功与否的关键在于域名解析是否正确。 一：域名的购买域名可在 阿里云 根据自己对域名后缀的喜好和需求进行购买。 二：域名的解析1.登陆 阿里云 ，点击首页的 “控制台” 菜单： 在控制台子项列表中选择 “域名” 选项： 在 “域名” 页面点击 “解析” 进行域名解析的相关操作与配置： 2.在 “解析设置” 里，点击 “添加纪录” ，按如下的方式总共添加三条记录： 记录类型 主机记录 解析线路(isp) 记录值 A @ 默认 xxx.xxx.xxx.xxx CNAME www 默认 yourname.github.io 其中： 第一条记录值中的 “xxx.xxx.xxx.xxx” 填写自己 “yourname.github.io” 的 IP地址， 查询方式为在 cmd 命令行窗口中输入指令 “ping yourname.github.io” 进行查看，例如 185.199.108.154 ; 第二条记录值中的 “yourname.github.io” 为自己的博客地址，两条记录添加完之后，经过一定的时间域名解析即可完成。 三：域名的绑定域名购买并解析成功后，在 /source 文件目录下新建一个不带后缀的名为 “CNAME” 的空白文件，以记事本打开后，输入购买的域名。例如所买的域名为 “123.com” ,则输入 “123.com” 即可，不用添加任何前缀。该文件保证了 “www.123.com”、 “123.com”、 “yourname.github.io” 三种方式都能正常访问博客地址。 无后缀文件的创建可在 linux系统下用如下指令进行创建： 12--- cd source # 先转到 /source 路径下--- touch CNAME # CNAME 文件的创建 “CNAME” 文件创建并修改完成后，经过博客的重新提交和部署即可用购买的域名进行访问。 如果无法进行访问，则有以下可能： 1.解析没有完成，一般需要在解析十分钟后域名才能生效，如果期间对记录值进行了修改， 也需要等一段时间。 2.域名没有完成实名认证，进行认证即可。","link":"/2019/04/13/Hexo-个性化域名的配置/"},{"title":"Hexo 常用指令","text":"Hexo 是一个快速、简洁而且高效的博客框架，本文主要对 Hexo 的常用指令含义和用法作简要说明。 clean1hexo clean 清除缓存文件（db.json）和已经生成的静态文件（public） 当 Hexo 更改新的主题后或者创建新的文章后，有时候会出现即使提交部署博客页面仍不见更新的情况，此时便可能需要执行此命令。 new1hexo new &quot;article title&quot; 创建一篇名为 “article title” 的博客。如果标题包含空格，则需要用双引号括起来。 generate1hexo g 生成静态网页。 server1hexo s 启动服务器。对 “generate” 生成的静态网页样式进行预览。 deploy1hexo d 网站部署，部署 “generate” 生成的静态网页。 init1hexo init 新建一个网站。如果没有设置 folder ，Hexo默认在目前的文件夹建立网站。 migrate1hexo migrate 从其他博客系统 迁移内容。 version1hexo version 查看 Hexo 的版本信息。 参考文献：Hexo文档","link":"/2019/04/12/Hexo-常用指令/"},{"title":"Hexo-网站分析插件配置","text":"为了统计博客的访问量等信息，需要安装并配置相关网站分析插件，ICRUS主题提供了四种分析插件：谷歌分析（Google Analytics）、百度分析(Baidu Analytics)、Hotjar 以及不蒜子(Busuanzi)。 不蒜子：两行代码搞定计数 12&lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt; 由于不蒜子可永久免费使用，且已经在ICRAUS中配置好了，只需打开 “使用开关” 即可，具体方法为在主题的配置文件 _config.yml 中找到 “busuanzi” 关键字，然后将其后默认的 “false” 修改为 “true” ，保存并重新部署即会在博客底部显示访客量，之后也可随时关闭统计。 12# https://busuanzi.ibruce.info busuanzi: ture # 修改此项 更多信息可参考： 不蒜子官网: http://busuanzi.ibruce.info/ ICARUS主题官网：https://blog.zhangruipeng.me/hexo-theme-icarus/ 幽小鬼简书：https://www.jianshu.com/p/c311d31265e0","link":"/2019/04/24/Hexo-网站分析插件配置/"},{"title":"Hexo 只显示文章部分内容的设置","text":"当文章内容太长却在博客界面全文显示时，很影响其他文章内容的概览，为了让博客界面的每一篇文章只显示文章摘要等一小部分重要信息作为文章内容的预览，可采用 &lt;!--more--&gt; 手动进行文章内容的截断。 使用 &lt;!--more--&gt; 标签时，只需将其放在文中合适的位置即可。","link":"/2019/04/12/Hexo-只显示文章部分内容的设置/"},{"title":"OpenCV-Python 图像的基本操作","text":"cv.imread() : 读取图像 cv.imshow() : 显示图像 cv.imwrite() : 保存图像 一、图像的读取和显示12345678import numpy as npimport cv2 as cvimg = cv.imread(&apos;test.jpg&apos;,0) # 以灰度模式读取图像，0为灰度模式，1为彩色模式cv.imshow(&apos;image&apos;,img) # 显示图像，“image”和“img”分别为窗口和图片的名称，cv.waitKey(0)cv.destroyAllWindows() # 删除窗口 删除指定窗口： 1cv.destroyWindow(&quot;image&quot;) cv.waitKey(0)：表示程序无限期等待，直到用户触发任意键。 二、读取并更改图像名称及格式123456import numpy as npimport cv2 as cvimg = cv.imread(&apos;test.jpg&apos;,0)cv.imwrite(&apos;test01.png&apos;,img) # 以名为test01格式为png保存图像 三、用Matplotlib读取并显示图像12345678import numpy as npimport cv2 as cvfrom matplotlib import pyplot as pltimg = cv.imread(&apos;test.jpg&apos;,0)plt.imshow(img, cmap = &apos;gray&apos;, interpolation = &apos;bicubic&apos;)plt.xticks([]), plt.yticks([]) # 隐藏X与Y轴plt.show() Warning：如果用OpenCV读取RGB模式的彩色图像，则无法在Matplotlib正常显示（OpenCV加载的彩色图像为BGR模式）。 参考文献： https://docs.opencv.org/3.4.0/dc/d2e/tutorial_py_image_display.html","link":"/2019/06/21/OpenCV-Python-图像的基本操作/"},{"title":"Hexo 文中图片的插入","text":"直接在 Markdown 编辑器中进行图片的插入会导致发布到博客后图片无法正常显示，本文主要介绍两种图片插入的方法。 方法一：文章资源文件夹将 \\Hexo 目录下的 _config.yml 配置文件中的 “post_asset_folder: false” 改为 “post_asset_folder: true”，再执行文章创建命令 $ hexo new &quot;article title&quot; 时，将会在 \\ _posts 目录下生成一个与所创建的文章标题同名的文件夹。 将要插入的图片放在生成的该文件夹内，引用时，首先将图片拖入文中，然后对 Markdown 中图片的引用格式作如下的修改： 1![图题](文章标题\\picturename.png) 其中 “picture name” 为所引用图片的名称。 通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确，为了解决这个问题，可以采用如下的方法进行图片的引用： 方法二：相对路径引用的标签插件标签插件的下载： 1npm install hexo-asset-image --save 或者通过： 1npm install https://github.com/CodeFalling/hexo-asset-image -- save 插件下载成功后，将要插入的图片放在文章资源文件夹中，文章中图片的引用格式如下： 1{% asset_img picturename.jpg 图题 %}","link":"/2019/04/12/Hexo-文中图片的插入/"},{"title":"OpenCV-Python 视频的基本操作","text":"一、Capture Video from camera1234567891011121314151617import numpy as npimport cv2 as cvcap = cv.VideoCapture(0)while(True): ret, frame = cap.read() #从摄像头读取图片 gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY) # 转为灰度图 cv.imshow(&apos;frame&apos;,gray) # 显示图像 k = cv.waitKey(0) if k == 27: # 按ESC键推出摄像 cv.destroyAllWindows() break elif k == ord(&quot;s&quot;): # 按S键保存图像 cv.imwrite(&quot;image2.jpg&quot;,frame) cv.destroyAllWindows() breakcap.release() # 关闭摄像头 注：ESC的ASCLL码为27。 二、Playing Video from file12345678910111213import numpy as npimport cv2 as cvcap = cv.VideoCapture(&quot;test.mp4&quot;)while(cap.isOpened()): ret, frame = cap.read() gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY) cv.imshow(&apos;frame&apos;,gray) if cv.waitKey(1) &amp; 0xFF == ord(&apos;q&apos;): breakcap.release()cv.destroyAllWindows() 三、Saving a Video12345678910111213141516171819import numpy as npimport cv2 as cvcap = cv.VideoCapture(0)fourcc = cv.VideoWriter_fourcc(*&apos;XVID&apos;) #编码解码形式out = cv.VideoWriter(&apos;output.avi&apos;,fourcc, 20.0, (640,480))while(cap.isOpened()): ret, frame = cap.read() if ret==True: frame = cv.flip(frame,0) out.write(frame) cv.imshow(&apos;frame&apos;,frame) if cv.waitKey(1) &amp; 0xFF == ord(&apos;q&apos;): break else: breakcap.release()out.release()cv.destroyAllWindows() FourCC ：用以指定视频编码解码方式，其所有的格式及描述：here XVID：一个开放源代码的MPEG-4的视频编解码器，文件扩展名可以是avi、mkv、mp4等； FPS（Frame Per-Second，每秒传输的帧数）：通常电影为24帧，电视30帧。 cv.waitKey(1)：表示延时1ms，即显示一帧然后等待1毫秒再显示下一帧。 参考文献： https://docs.opencv.org/3.4.0/dd/d43/tutorial_py_video_display.html","link":"/2019/06/21/OpenCV-Python-视频的基本操作/"},{"title":"Hexo 文章的发布","text":"用 Hexo 框架结合 Github pages 搭建好博客平台后，接下来便是博客文章的创建和发布，本文主要对博客文章的创建和发布方法做了详细介绍。 1.文章标题的创建将Git Bash定位在 E:\\Hexo_blog\\Hexo 目录下，并运行如下指令创建一个带有标题的新空白文件： 1hexo new &quot;article title&quot; 其中，E:\\Hexo_blog 为 Hexo 的安装目录，E:\\Hexo_blog\\Hexo 为 Hexo 的初始化目录，“article title” 为博客文章的标题。 2.文章信息的完善执行上述指令后，将会在 E:\\Hexo_blog\\Hexo\\source_posts 文件目录下生成一个名为 “article title” 格式为 .md 的文档，用 Markdown 编辑器进行所创建文档的编辑，完善 “tags”，“categories” 等信息，格式如下： 1234title: &quot;article title&quot; # 文章标题date: 2019-04-10 10:48:14 # 文章创建时间tags: [ubuntu,windows] # 标签信息categories: operate system # 分类信息 “tags”、“categories” 等项可以在/Hexo/scaffolds目录下的“post”文件中作相应的修改，可以根据实际需求添加该项或者删除该项。 3.文章的预览和发布将编辑完的文章保存，运行如下指令即可进行文章样式的预览和将本地文章发布到博客网站： 123hexo g # 生成静态文件hexo s # 预览hexo d # 部署 运行 hexo s 进行预览时，如果用 http://localhost:4000/ 访问出现加载无效的问题，则有可能默认端口被占用，换个端口即可，比如将4000换为4001，端口切换指令如下： 1hexo s -p 4001 4.博客文章的访问文章部署完成后，即可通过搜索引擎访问 “https://suyuann.github.io” 进行新发布文章的查询。","link":"/2019/04/12/Hexo-文章的发布/"},{"title":"ICARUS主题缩略图及文章目录的添加","text":"一：缩略图（thumbnail）的添加 二：目录（catalogue）的添加 一：缩略图（thumbnail）的添加 首先将 ICARUS 主题的配置文件 _config.yml 中的 thumbnail 这一项设置成 “true”： 12# Article display settingthumbnail: true 在 /Hexo /scaffolds 目录下的 post 文件中添加 thumbnail 这一项： 123title: {{ title }}date: {{ date }}thumbnail: # 添加该项 每次创建新的文件后，将要插入的缩略图的链接（URL）填入上述 thumbnail 后面即可。 缩略图如果在本地的话，则需要在 /Hexo /source 目录下新建一个名为 gallery 的文件夹，并将缩略图放在该文件夹中，这种情况下缩略图的路径格式为： 1thumbnail：/gallery/picturename.jpg 二：目录（catalogue）的添加 在 /Hexo /scaffolds 目录下的 post 文件中添加 toc 这一项： 1234title: {{ title }}date: {{ date }}thumbnail: toc: true # 添加该项 在 ICARUS 主题的配置文件_config.yml 中添加 toc 控件： 1234widgets: - type: toc position: left 一般来说 toc 控件在ICARUS 主题的 _config.yml 配置文件中就已经存在的，已经有的情况下，就不需要再添加。","link":"/2019/04/15/ICARUS主题缩略图及文章目录的添加/"},{"title":"OpenCV-Python 绘图基本操作","text":"一、直线的绘制12345678910111213141516import numpy as npimport cv2 as cvimg = np.zeros((512,512,3), np.uint8) # 画布大小512*512，空白cv.line(img,(0,0),(511,511),(255,0,0),5) # 第一条直线，宽度5pxcv.line(img,(0,511),(511,0),(0,255,0),5) # 第二条直线 宽度5pxcv.imshow(&apos;image&apos;, img)k = cv.waitKey(0)if k == 27: cv.destroyAllWindows()elif k == ord(&apos;s&apos;): cv.imwrite(&apos;line.png&apos;,img) cv.destroyAllWindows() 二、矩形的绘制1cv.rectangle(img,(206,206),(306,306),(255,0,0),5) 三、圆的绘制12cv.circle(img,(256,256), 100, (0,0,255)) # 圆形，线宽1pxcv.circle(img,(256,256), 100, (0,0,255), -1) # 填充的圆 四、椭圆的绘制1cv.ellipse(img,(256,256),(100,50),0,0,360,(255,0,0),5) 五、多边形的绘制123pts = np.array([[10,5],[20,30],[70,20],[50,10]], np.int32)pts = pts.reshape((-1,1,2))cv.polylines(img,[pts],True,(255,0,0)) 绘制多边形先指定多边形各个顶点的坐标， 第三行第三个参数为False时，则绘制出一些列多边形的顶点而非闭合图形。 六、图像中文字的添加123font = cv.FONT_HERSHEY_SIMPLEX # 字体cv.putText(img,&apos;OpenCV&apos;,(10,500), font, 4,(255,255,255),2,cv.LINE_AA)# 字体大小为4，线型为cv.LINE_AA 参考文献： https://docs.opencv.org/3.4.0/dc/da5/tutorial_py_drawing_functions.html","link":"/2019/06/21/OpenCV-Python-绘图基本操作/"},{"title":"Ubuntu18.04关机卡死的解决方法","text":"联想拯救者R720因为带有独立显卡，在安装Win10/Ubuntu18.04双系统时大概率上会遇到Ubuntu系统关机或者关机重启电脑时就卡死的情况。解决方法如下： 在终端输入如下命令： 1software-properties-gtk 会弹出如下的 “软件和更新” 窗口： 选择菜单栏的 “附加驱动” ，会出现带有你自己电脑显卡型号的一个选择项，选择该项并 “应用更改”，电脑即可正常关机和重启。","link":"/2019/04/30/Ubuntu18-04关机卡死的解决方法/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/04/10/hello-world/"},{"title":"Ubuntu18.04上Github的安装","text":"git 安装前，需先进行 Github 账号的注册。 一、Git 的安装在 Ubuntu 命令终端输入如下指令进行 git 的安装： 1sudo apt install git 根据提示输入管理员密码，之后询问是否安装，输入 “y” 即可。 接下来进行用户名和密码的配置 在命令终端依次输入如下的指令： 12git config --global user.name &quot;此处填入注册的github用户名&quot;git config --global user.email &quot;此处填入注册github时的邮箱&quot; user.name 后边填入注册的 github 用户名；user.email 后边填入注册 github 时的邮箱。 再次输入 1git config --list 将会显示注册 github 时的用户名和邮箱地址。 二、SSH Keys 的添加1ssh-keygen -t rsa -C &quot;注册邮箱&quot; # 此处填入注册邮箱 上述指令执行过程中连续回车即可，key 的默认保存位置为 /.ssh 目录，接下来转到该目录下，并输入如下的指令： 12cd /home/suyuan/.sshls 会出现 id_rsa id_rsa.pub , 接着输入： 1cat id_rsa.pub 将会生成所需的一串公钥： 将该公钥进行备份，接下来登陆自己的 github 账号，点击自己头像处的小三角，在下拉菜单中找到 “Settings” ，进去后选择 “SSH and GPG keys” 这一项，之后点击 “New SSH key” 新建一个 SSH key。 在 “ Title ” 处随意填写一个名称； 在 “ Key ” 处，将刚才生成的一串公钥复制进去并保存。 返回根目录，输入如下指令测试密钥是否配置成功 12cd / # 返回根目录ssh -T git@github.com 出现 “ You’ve successfully authenticated, but GitHub does not provide shell access. ” 等字样时，说明配置成功。 三、远程仓库的创建点击自己 Github 头像左边的 “+” ，选择 “New Repository” 新建一个远程仓库，创建完成后，会生成一个如下所示的网页，HTTPS SSH 后面的那个网址保存下来以备创建本地仓库时用。 四、本地仓库的创建在命令终端输入如下指令进行远程仓库的克隆和初始化： 1git clone &quot;此处复制进上述保存的那个网址&quot; 此时会在根目录下生成一个与远程仓库同名的文件夹，例如我所创建的仓库名称为 “github” 。 转至所生成的本地仓库目录下，将仓库初始化： 12cd “本地仓库名”git init 五、将本地仓库文件推送至远程仓库在本地仓库新建一个名为 “ceshi” 的文本，执行如下的指令将该文件即可推送至远程仓库： 1234git add ceshigit commit -m &quot;first commit&quot; # 提交说明git remote add origin https: https//github.com/Xavier01/github.git # 仓库地址git push -u origin master 登陆Github 账号，在所创建的仓库中，即可看到从本地提交的文件及其信息。","link":"/2019/04/30/Ubuntu18-04上Github的安装/"},{"title":"损失函数","text":"","link":"/2019/06/27/损失函数/"},{"title":"欠拟合与过拟合","text":"","link":"/2019/06/27/欠拟合与过拟合/"},{"title":"正则化","text":"","link":"/2019/06/27/正则化/"},{"title":"激活函数","text":"一：引入激活函数（activation function）用于对输入信息进行非线性变换，然后将变换后的输出信息作为输入信息传给下一层神经元，解决了线性模型表达能力不足的问题（如果没有非线性的激活函数，每一层节点的输入都是上一层输出的线性组合，线性函数容易解决，但是其复杂性有限，无法学习复杂类型的数据，而且无论网络有多少层，输出都是输入的线性组合）。 激活函数使反向传播成为可能，因为激活函数的误差梯度可以用来调整权重和偏差。如果没有可微的非线性函数，这就不可能实现。 为了更直观的理解为什么要引入激活函数，以如下的例子作以说明： 图2为一个单层的感知机，它的输出为一个线性方程，即函数图像为一条直线，可以用于线性可分的二分类问题： 其输出为：$$y=w_1x_1+w_2x_2+b$$如果将其用于线性不可分的二分类情况呢？显然一条直线无法做到完全分开两类数据，但是为了能有更好的分类能力，我们试着将多个感知机组合起来，如下图所示： 得到的最终输出为：$$y=w_{211}(w_{111}x_1+w_{121}x_2+b_{11})\\\\+w_{221}(w_{112}x_1+w_{122}x_2+b_{12})\\\\+w_{231}(w_{113}x_1+w_{123}x_2+b_{13})$$整理上式得到：$$y=（w_{211}w_{111}+w_{221}w_{112}+w_{231}w_{113}）x_1\\\\+(w_{211}w_{121}+w_{221}w_{122}+w_{231}w_{123})x_2\\\\+(w_{211}b_{11}+w_{221}b_{12}+w_{231}b_{13})$$从上式可以看出网络的输出结果是类似式单层感知机输出的线性方程，只不过是直线的位置和角度发生了变化而已。 再继续将网络加深，依然得到类似的结果。也就是说不管神经网络有多少层，它都会像单层网络一样工作，最终只能得到一个线性函数，而这根本不足解决线性不可分乃至更复杂的分类问题。 正是为了应对这一问题，在神经网络中引入了激活函数，非线性的激活函数使得输入到输出的映射变成非线性，从而能够学习和执行更复杂的任务。 如下图所示，在网络中添加一个非线性的激活函数： 得到下的输出，很明显该输出是非线性的：$$a=w_1x_1+w_2x_2+b$$ $$y=\\sigma(a)$$ 在图（3）的网络中加入非线性的激活函数后其示意图如图（5）所示： 经过计算得到：$$a_1=w_{111}x_1+w_{121}x_2+b_{11}\\\\a_2=w_{112}x_1+w_{122}x_2+b_{12}\\\\a_3=w_{113}x_1+w_{123}x_2+b_{13}$$网络最终的输出为：$$y=\\sigma[(w_{211}\\sigma(a_1))+(w_{221}\\sigma(a_2))+(w_{231}\\sigma(a_3))]$$非线性激活函数的加入，解决了线性模型不能解决的问题。 常用的激活函数有Sigmoid激活函数，Tanh激活函数，ReLU激活函数以及ReLU的改进版本Leakey ReLU 和 ELU。 二：Sigmoid激活函数Sigmoid函数的表达式及图像如下所示：$$Sigmoid(x)=\\frac{1}{1+e^{-x}}$$ Sigmoid函数的输出映射在0到1区间，当神经元的输出为1时，表示该神经元完全被激活，否则为未被激活。 Sigmoid激活函数存在的问题是当神经元的激活状态接近0或者1时，这些区域的梯度会变的非常小接近于0，导致梯度消失，网络不能进行真正的学习。此外，该函数的另一个缺点是其图像并不关于原点对称。 三：Tanh激活函数Tanh函数是Sigmoid函数的一种变形，其图像被限制在两个水平线$y=-1$ 与$y=1$ 之间，如上图（6）所示。当神经元的输出为1时，表示该神经元完全被激活，否则为未被激活，函数表达式为：$$Tanh(x)=\\frac{e^x-e^{-x}}{e^x+e^{-x}}=2sigmoid(2x)-1$$Tanh函数比Sigmoid函数优异的地方在于其图像关于原点对称，后续处理起来比较方便，而且相比sigmoid函数训练时收敛速度更快。 Tanh激活函数的缺点是也会像Sigmoid激活函数一样，会导致模型的梯度消失。 Tanh和Sigmoid作为激活函数两者的共同缺点在于都存在两端梯度弥散，计算量大的问题，而ReLU激活函数可以很好地解决这个问题。 四：ReLU激活函数ReLU函数的表达式和函数图像如下所示：$$ReLU=max(0,x)$$ ReLU激活函数梯度要么是1要么是0，有效的解决了梯度消失问题，此外ReLU激活函数（修正线性单元）优于其他激活函数的一点在于它不会同时激活所有的神经元，如果输入值是负的，ReLU函数会转换为0，而神经元不被激活。这意味着，在一段时间内，只有少量的神经元被激活，神经网络的这种稀疏性使其变得高效且易于计算。 ReLU激活函数的缺点是训练的时候比较“脆弱”，输入持续为负的神经元激活值总是为0，会导致部分神经元“死亡”。而Leaky ReLU与ELU解决了该问题，在输入小于0时，存在一个很小很小的斜率。 五：Leakey ReLU 和 ELU激活函数$$Leaky ReLU=max(0.01x,x)$$ Leakey ReLU激活函数与ReLU激活函数不同的是，在$x&lt;0$时，有一个很小但不为0的斜率，避免了神经元“死亡”。$$ELU=\\begin{cases}x\\ \\ x&gt;0 \\\\ \\alpha(e^x-1)\\ \\ others \\end{cases}$$ 理论上Leakey ReLU激活函数与ELU激活函数有ReLU激活函数所有的优点，但是实际应用中的较少，ELU的一个小缺点在于计算量稍大。 六：激活函数的选择综合以上各激活函数的优缺点，一般优先选择ReLU激活函数，其次Tanh，最后Sigmoid激活函数。 注：ReLU函数只能在隐藏层中使用。 七：参考文献https://zhuanlan.zhihu.com/p/45017091 https://zhuanlan.zhihu.com/p/30510596 https://www.zhihu.com/question/22334626","link":"/2019/06/23/激活函数/"},{"title":"Ubuntu18.04上WPS2019的安装","text":"一、WPS安装包的下载在 WPS官网 下载 WPS Office 2019 For Linux 的 Deb 格式安装包： 二、将下载的安装包右键用“软件安装“打开并安装，或者终端输入如下指令进行安装：1sudo dpkg -i wps-office_11.1.0.8392_amd64.deb 三、修复字体缺失安装好的WPS在第一次打开时，会提示系统缺失字体。 下载 字体包 并解压，运行如下的命令将解压后的字体文件移至 /usr/share/fonts 目录下： 12sudo susudo mv /home/suyuan/下载/wps_symbol_fonts/ /usr/share/fonts/ 之后运行以下指令生成字体的索引信息以及更新字体的缓存： 1234cd /usr/share/fontssudo mkfontscalesudo mkfontdirsudo fc-cache 四、Libreoffice 的卸载1sudo apt-get remove libreoffice-common 或者进入软件管理中心进行卸载。","link":"/2019/04/30/Ubuntu18-04上WPS2019的安装/"},{"title":"用you-get进行网页视频的下载","text":"You-Get是一个命令行程序，提供便利的方式来下载网络上的媒体信息，可以是视频，音乐或者图片。 一：You-get的安装 在windows命令控制窗口中输入如下指令进行You-get的安装： 1pip3 install you-get You-get工具的升级： 1pip3 install --upgrade you-get pip的更新： 1python -m pip install --upgrade pip 二：视频的下载 画质的选择： 1you-get -i 视频链接 在cmd命令控制窗口中输入上述指令后，将会出现一系列视频画质选项及其相应的下载指令，如下图所示： 视频的下载： 1you-get -i --format=mp4hd URL 将上述指令中的 URL 替换成所要下载的视频链接即可（具体画质和下载格式见指令） 三：暂停下载1Ctrl+C 四：支持的部分国内网站 哔哩哔哩（http://www.bilibili.com/） 爱奇艺（http://www.iqiyi.com/） 优酷（http://www.youku.com/） 腾讯视频（http://v.qq.com/） 凤凰视频（http://v.ifeng.com/） 乐视网（http://www.letv.com/） 知乎（https://www.zhihu.com/） 豆瓣（http://www.douban.com/） 参考资料https://you-get.org/ https://github.com/soimort/you-get/wiki/中文说明","link":"/2019/06/19/用you-get进行网页视频的下载/"},{"title":"神经网络","text":"","link":"/2019/06/27/神经网络/"},{"title":"随机梯度下降","text":"","link":"/2019/06/27/随机梯度下降法/"},{"title":"用又拍云进行图片云存储","text":"在 Markdown 文档中插入本地图片后，一旦出现图片存储位置发生改变、图片被删除、或者文档发送给别人后，文档中的图片将会失效。为了解决这个问题，同时为了节约本地服务器空间，加快图片访问速度，我们可以将图片存储于第三方平台上，这种平台即“图床”。 有很多免费的国内外 图床 ，但是为了保证长期存储图片的安全，不会因为网站停止运营等情况导致图片的丢失，建议将重要的图片存储在像 “又拍云”、“七牛云” 等国内做得比较好的收费图床平台上。本文主要对又拍云上图片的上传方法和图片的引用方法做详细介绍。 一：创建服务 首先进行 又拍云 的注册及实名认证。 在 “云产品” 栏目下选择 “基础产品” 里面的 “云存储” ，然后在 “服务管理 云存储” 页面点击 “创建服务” 按照官方文档文档说明进行服务的创建和相关配置。完成后在 “云存储” 页面显示如下的信息说明创建成功： | 服务名称 | 加速域名 | 应用场景 | 状态 | 管理 || ——– | ———————- | ——– | —— | ——– || blog-01 | blog-01.test.upcdn.net | 网页图片 | 服务中 | ——– | 其中： blog-01 为自己创建的服务名； blog-01.test.upcdn.net 为平台分配的测试域名。如果自己有注册并备案过的域名（没有进行备案无法绑定），绑定自己的域名最好。如果没有，则可以使用该测试域名，咨询过又拍云的客服人员，说该测试域名没有使用时间限制，可以保证一直正常访问。 二：本地图片的上传 点击 “服务名称” （即上表中的 blog-01），进去后找 “内容管理” 这一项并点击进入，查看 “管理指南” 的 “详情”，可以看到又拍云提供了三种文件管理方式：“API(应用程序编程)”、“FTP(界面化工具)”、“UPX”(命令行工具)，官方文档对使用方法有详细的说明，可以根据自己的喜好进行文件管理方式的选择。下面主要介绍 FTP(界面化工具) 的使用方法： 通过 FTP/FTPS 客户端，可以连接云存储的 FTP/FTPS 服务器，实现对云存储的管理。推荐使用 FileZilla 客户端 。 FileZilla 客户端下载后，点击 “文件” 菜单下面那个按钮，将会出现如下图所示的 “站点管理器” 配置界面： 选择左下角的 “新站点” 然后进行相关的配置，主要参数填写如下： ——主机 智能线路 电信线路 联通线路 移动线路 v0.ftp.upyun.com v1.ftp.upyun.com v2.ftp.upyun.com v3.ftp.upyun.com 推荐填写智能线路的 v0.ftp.upyun.com ——端口 21 ——用户/密码 例如我在 “服务创建” 中创建服务名称为 “blog-01” ，创建的操作员名称为 xavier ，操作员密码为 123456 ，则此处的用户名填写为：xavier/blog-01，密码填写123456即可。 各参数填写完成后点击 “连接” 即可连接到云端，在FileZilla界面右侧栏会显示出远程站点及文件目录。 将本地的图片拖到如下图所示的第4个区域即可实现上传： 上传到云端的图片可以在FileZilla进行查看和操作，也可以在又拍云上进行查看和管理，地址为：https://uptool.tingfun.net/view/index.php ，推荐后一种方法。 三：云端图片的引用需要在 Markdown 编辑器中插入图片时，如下图所示，点击文件名即可对图片进行预览，将图片直接拖入 Markdown 编辑器中即可。","link":"/2019/04/14/用又拍云进行图片云存储/"},{"title":"Ubuntu18.04上OpenCV3.4.0的安装和测试","text":"Ubuntu上OpenCV的安装由于要安装各种依赖，而且编译过程稍有不慎便会遇到各种意外状况，导致安装的难度较大，为此我也是参考了很多资料安装了很多次才安装并且测试成功。此文记录了安装的详细过程，希望能为同样需要搭建 OpenCV 环境却在安装过程中遇到各种棘手问题的人提供一些有益的参考。 一、OpenCV3.4.0安装包的下载下载地址 （选择Sources项下载保存到本地） 我是在主目录位置新建了一个名为 “Software” 的文件夹，并将下载的 opencv-3.4.0 解压在此目录下。 二、Ubuntu上修改默认启动的Python版本由于学习过程中很多资源的代码都是建立在Python3的基础上，然而一般的OpenCV安装如果不做配置会默认指向Ubuntu系统默认的Python2.7版本，这就导致了在Python3环境中调用OpenCV时会出现 “No module named cv2” 这种错误。 为了解决这个问题，有必要将Ubuntu18.04中默认的Python2.7启动版本修改为Python3.6版本（Ubuntu18.04中默认安装了两个 Python 版本：Python 2.7.15 和 Python 3.6.7） 修改方法为： 移除 /usr/bin 目录下指向 Python2 的软链接（该目录下有一个名为 “python” 的文件，移除之），并与Python3.6建立新的链接（不要删除安装的Python2.7版本，否则可能后果很严重）。 12sudo rm /usr/bin/pythonsudo ln -s /usr/local/bin/python3.6 /usr/bin/python 上述 /usr/local/bin/python3.6 是 Python 3.6.7 的安装位置，执行第二条指令后将会在 /usr/bin 目录下重新生成一个名为 “python” 的文件, 再于终端输入 python 时，将会默认启动Python 3.6 版本。 三、OpenCV相关依赖安装 软件列表及软件的更新 12sudo apt-get updatesudo apt-get upgrade 开发工具的安装 1sudo apt-get install build-essential cmake pkg-config 图像处理相关库安装 1sudo apt-get install libjpeg8-dev libtiff5-dev libjasper-dev libpng12-dev libjpeg8-dev、libtiff5-dev、libpng12-dev可能存在新的版本，可用如下的指令进行升级： 123sudo apt-get install libjpeg8-devsudo apt-get install libtiff-devsudo apt-get install libpng-dev 视频处理相关库安装 12sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-devsudo apt-get install libxvidcore-dev libx264-dev GTK库的安装 1sudo apt-get install libgtk-3-dev 用于优化opencv内部各种功能的库的安装 1sudo apt-get install libatlas-base-dev gfortran numpy库的安装 1sudo apt-get install python3-numpy 四、编译及安装 进入已解压的文件opencv-3.4.0目录下，执行如下指令： 123456789101112mkdir buildcd buildcmake -D CMAKE_BUILD_TYPE=RELEASE \\-D CMAKE_INSTALL_PREFIX=/usr/local \\-D PYTHON3_EXECUTABLE=/usr/bin/python3 \\-D PYTHON_INCLUDE_DIR=/usr/include/python3.6 \\-D PYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.6m.so \\-D PYTHON3_NUMPY_INCLUDE_DIRS=/usr/local/lib/python3.6/dist-packages/numpy/core/include \\-D INSTALL_PYTHON_EXAMPLES=ON \\-D INSTALL_C_EXAMPLES=OFF \\-D PYTHON_EXECUTABLE=/usr/lib/python3 \\-D BUILD_EXAMPLES=ON .. 运行完成后会出现如下的信息，可以看到 Python(for build) /usr/bin/python3 这一项。 编译 1make -j4 编译过程比较漫长，完成后如下图所示： 安装 1sudo make install 如果不出什么意外，安装的过程将会比较顺利，完成后会如下图所示： 五、安装成功与否的测试 首先在终端输入： 12pythonimport cv2 如果没有提示任何错误，接下来用HOG特征的提取代码做一下测试： HOG特征提取的测试 测试图片为： 将该图片下载并重命名为 “test”，临时放在根目录下。 HOG特征提取代码： 12345678910from skimage.feature import hogfrom skimage import iofrom PIL import Imageimport cv2img = cv2.cvtColor(cv2.imread(&apos;/home/suyuan/test.jpg&apos;), cv2.COLOR_BGR2GRAY)print(img.shape)normalised_blocks, hog_image = hog(img, orientations=9, pixels_per_cell=(8, 8), cells_per_block=(2, 2), block_norm=&apos;L2-Hys&apos;,visualise=True)io.imshow(hog_image)io.show() 将该代码复制下来并保存为名为 test 的 .py 格式文件，与测试图片放在同一目录下。 在终端输入如下的指令进行HOG特征提取所需要的 skimage 库的安装： 1sudo apt-get install python3-skimage 安装好skimage库后，在终端运行HOG特征提取代码： 1python test.py 此时不出意外的话，会跳出如下一张HOG特征图，说明OpenCV安装成功。 本文的安装方法只能说明照这样安装可以安装成功，并不代表一定得这样安装，OpenCV安装成功与否的测试也可以选择其他较为简单且直观的方法，。 参考资料： https://www.jianshu.com/p/2975af275871 https://www.pyimagesearch.com/2016/10/24/ubuntu-16-04-how-to-install-opencv/ https://blog.csdn.net/lch_vison/article/details/79112693 https://blog.csdn.net/u013066730/article/details/79411767","link":"/2019/05/03/Ubuntu18-04上OpenCV3-4-0的安装和测试/"},{"title":"Ubuntu18.04上修改默认启动的python版本","text":"Ubuntu18.04中默认安装了两个 Python 版本：Python 2.7.15 和 Python 3.6.7 ，在命令终端输入 python 时，默认的启动版本是 python 2.7.15 ，通过以下两种方式可以将默认启动的 Python 版本修改为 3.6.7 ： 方法一：直接在终端执行以下两条命令： 12sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 100sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 150 方法二：移除 /usr/bin 目录下指向 Python2 的软链接（该目录下有一个名为 “python” 的文件，移除之） 12sudo rm /usr/bin/pythonsudo ln -s /usr/local/bin/python3.6 /usr/bin/python 上述 /usr/local/bin/python3.6 是 Python 3.6.7 的安装位置，执行第二条指令后将会在 /usr/bin 目录下重新生成一个名为 “python” 的文件, 再于终端输入 python 时，将会默认启动Python 3.6 版本。 Python安装位置的查询方法为： 1whereis python 注意：请勿删除python2.7版本。","link":"/2019/05/03/Ubuntu18-04上修改默认启动的python版本/"}],"tags":[{"name":"AlexNet","slug":"AlexNet","link":"/tags/AlexNet/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"ICARUS","slug":"ICARUS","link":"/tags/ICARUS/"},{"name":"Loss Function","slug":"Loss-Function","link":"/tags/Loss-Function/"},{"name":"Overfitting","slug":"Overfitting","link":"/tags/Overfitting/"},{"name":"Regularization","slug":"Regularization","link":"/tags/Regularization/"},{"name":"activation function","slug":"activation-function","link":"/tags/activation-function/"},{"name":"Neural NetWorks","slug":"Neural-NetWorks","link":"/tags/Neural-NetWorks/"},{"name":"SGD","slug":"SGD","link":"/tags/SGD/"},{"name":"Opencv","slug":"Opencv","link":"/tags/Opencv/"},{"name":"python","slug":"python","link":"/tags/python/"}],"categories":[{"name":"Netwaork Model","slug":"Netwaork-Model","link":"/categories/Netwaork-Model/"},{"name":"Blog","slug":"Blog","link":"/categories/Blog/"},{"name":"OpenCV","slug":"OpenCV","link":"/categories/OpenCV/"},{"name":"Ubuntu","slug":"Ubuntu","link":"/categories/Ubuntu/"},{"name":"Machine Learning","slug":"Machine-Learning","link":"/categories/Machine-Learning/"}]}